generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< HEAD:prisma/schema.prisma
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  email          String?       @unique
  username       String?       @unique
  displayName    String?
  avatarUrl      String?
  authProvider   String?
  authExternalId String?       @unique
  deviceId       String?       @unique
  totalWins      Int           @default(0)
  totalGames     Int           @default(0)
  streak         Int           @default(0)
  longestStreak  Int           @default(0)
  results        DailyResult[]
  events         Event[]
=======
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Basic identity
  email         String?  @unique
  username      String?  @unique
  displayName   String?
  avatarUrl     String?
  // Optional external identities (fill later)
  authProvider  String?   // 'replit' | 'supabase' | 'clerk' | 'authjs' | 'dev'
  authExternalId String?  @unique

  // Anonymous support (mobile first-run)
  deviceId      String? @unique
  isAnonymous   Boolean  @default(true)
  
  // Account linking/migration support
  mergedIntoUserId String? // If this account was merged into another, store the target user ID
  mergedAt         DateTime? // When the merge happened

  // Game stats (denorm hints; keep truth in result tables)
  totalWins     Int      @default(0)
  totalGames    Int      @default(0)
  streak        Int      @default(0)
  longestStreak Int      @default(0)

  results       DailyResult[]
  events        Event[]
  sessions      Session[]
>>>>>>> f2024d4c2b5c539a22def6acaa8fcda1be6f2a1a:server/prisma/schema.prisma
}

model WordLexicon {
  id     Int     @id @default(autoincrement())
  word   String  @unique
  length Int
  active Boolean @default(true)

  @@index([length, active])
}

/// One "daily" row per date. `seed` is the method to derive the word deterministically.
model DailyPuzzle {
  id         String        @id @default(cuid())
  date       String        @unique
  word       String
  createdAt  DateTime      @default(now())
  locked     Boolean       @default(false)
  checksum   String?
  difficulty String        @default("medium")
  results    DailyResult[]
}

/// One row per user per daily.
model DailyResult {
  id          String      @id @default(cuid())
  userId      String
  puzzleId    String
<<<<<<< HEAD:prisma/schema.prisma
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  attempts    Int
  solved      Boolean
  durationMs  Int?
  hardMode    Boolean     @default(false)
=======
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  /// gameplay data
  guesses      Json     // list of guessed words (stored as JSON array)
  patterns     Json     // list of patterns (arrays of color strings, stored as JSON)
  attempts     Int      // 1..6 ; NULL => DNF
  won          Boolean  // true if solved
  completed    Boolean  @default(false) // true if game is over
  completedAt  DateTime? // when completed
  solved       Boolean  // true if solved (same as won)
  durationMs   Int?     // optional
  hardMode     Boolean  @default(false)

>>>>>>> f2024d4c2b5c539a22def6acaa8fcda1be6f2a1a:server/prisma/schema.prisma
  /// anti-cheat hints (optional)
  submittedIp String?
  userAgent   String?
  clientBuild String?
  completed   Boolean     @default(false)
  completedAt DateTime?
  /// gameplay data
  guesses     String[]
  patterns    Json[]
  won         Boolean
  puzzle      DailyPuzzle @relation(fields: [puzzleId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@unique([userId, puzzleId])
  @@index([puzzleId, attempts, won])
}

/// Simple append-only analytics stream.
model Event {
  id     String   @id @default(cuid())
  userId String?
  type   String
  ts     DateTime @default(now())
  roomId String?
  meta   Json?
  user   User?    @relation(fields: [userId], references: [id])

  @@index([type, ts])
  @@index([roomId, ts])
}

/// Session tracking for both anonymous and authenticated users
model Session {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String?  // Browser/device identifier
  token       String   @unique // Session token for client
  isAnonymous Boolean  @default(true)
  expiresAt   DateTime
  lastSeenAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  
  // Connection metadata
  userAgent   String?
  ipAddress   String?
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId, expiresAt])
  @@index([token, expiresAt])
  @@index([deviceId])
}
